Circus + Chaussette + Meinheld:
circus script:
# Need to use python3 PR for web console: https://github.com/aadu/circus-web.git
# Starts webconsole on port 8080
# Chose Meinheld as backend over the default based on WSGIRef

[circus]
statsd = True
httpd = True
httpd_host = localhost
httpd_port = 8080

[watcher:webapp]
uid = itrans
working_dir = /srv/itrans
virtualenv = /srv/itrans_venv
copy_env = True
cmd = /srv/itrans_venv/bin/chaussette --fd $(circus.sockets.web) paste:test.ini --backend meinheld
numprocesses = 5
use_sockets = True

[socket:web]
host = 0.0.0.0
port = 9999


# NGINX to handle static files and reverse proxy rest to application
# copy to /etc/nginx/sites-enabled/

server {
        listen 80 default_server;
        listen [::]:80 default_server;
        charset utf-8;

        location /static {
                alias /srv/itrans/itrans/static;
        }

        location / {
                try_files $uri @app;
        }

        location @app {
                include proxy_params;
                proxy_pass http://localhost:9999                ;
        }
}

# Systemd unit file to ensure app is brought back on restart
# Place config file in /etc/cirucus
# And add unit file to /etc/systemd/system/circus.service
[Unit]
Description=Circus process manager
After=syslog.target network.target nss-lookup.target

[Service]
Type=simple
ExecReload=/usr/local/bin/circusctl reload
ExecStart=/usr/local/bin/circusd /etc/circus/circus.ini
Restart=always
RestartSec=5

[Install]
WantedBy=default.target

####################################################################################################

uWSGI and NGINX:
Need to install uwsgi-plugin-python3
socket permissions then need to be set to 777 (need to figure out better way to do this)
Uwsgi command:
uwsgi -s /tmp/app.sock --manage-script-name --mount /=wsgi_app_v2:app --plugin python3

app.ini and systemd.test_app.service are working examples of how to configure a systemd service
# tricky part is there are 2 uwsgis installed! /usr/bin/uwsgi and /usr/local/bin/uwsgi



Nginx config (modified these lines in the default sites-enabled config (/etc/nginx/sites-enabled/default:

 #root /var/www/html;

# Serve app at root and pass all requests to the uwsgi socket
location / {
        try_files $uri @app;
}

location @app {
        include uwsgi_params;
        uwsgi_pass unix:/tmp/app.sock;
}


Gunicorn and nginx:
/usr/local/bin/gunicorn wsgi_app_v2:app

nginx proxy pass used (changed default sites-enabled config):
location / {
                include proxy_params;
                proxy_pass http://localhost:8000;
        }

Gevent (also used proxy pass - port 5000 this time):
Need only add a gevent server file and run it:
from gevent.wsgi import WSGIServer
from wsgi_app_v2 import app

http_server = WSGIServer(('', 5000), app)
http_server.serve_forever()

mod_wsgi:
Place a config file in the apache sites-enabled directory to tell apache about the wsgi app
Sample:
<VirtualHost *:80>

    WSGIDaemonProcess yourapplication user=rmharriman group=rmharriman threads=5
    WSGIScriptAlias / /var/www/html/cgi-bin/app.wsgi

    <Directory /var/www/html/cgi-bin>
        WSGIProcessGroup yourapplication
        WSGIApplicationGroup %{GLOBAL}
        Require all granted
    </Directory>
</VirtualHost>

Create a wsgi file that receives calls (mapped above in the script alias):
# Need to make sure instance of application is called application
import sys
sys.path.insert(0, '/var/www/html/cgi-bin')

from wsgi_app_v2 import app as application