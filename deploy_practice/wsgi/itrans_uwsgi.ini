
# INI file for running itrans on uwsgi
[uwsgi]
chdir = /srv/itrans

# Can use paste deploy application and specify the ini here.
# in this case the wsgi file is not necessary
ini-paste = test.ini

# Use wsgi file for apps that are not paste deploy (e.g., flask)
#wsgi-file = itrans.wsgi

# Have not been able to get this to work
#module = itrans.wsgi

# This option is used to enable or disable a master uWSGI process.
# These processes are used for managing workers which accept and deal with the incoming requests.
# The advantages are many, including gracefully restarting workers without touching the sockets
#   which would allow you upgrades without downtime.
master = true
processes = 5

# Use for testing (no nginx in front; uwsgi acts as http server)
#http = :8000

uid = itrans
socket = /run/uwsgi/itrans.sock
chown-socket = itrans:www-data
chmod-socket = 660

# Removes socket on exit
vacuum = true

virtualenv = /srv/itrans_venv

die-on-term = true

# If you are worried about memory leaks and can not think of a more solid way of dealing with it,
# this option will allow you to restart your processes automatically
#   after dealing with the set amount of requests specified.
max-requests = 1001


# Set uWSGI to write the process PID to a file specified by the option.
# This option is very handy for the management of uWSGI processes running
# pidfile = /tmp/proj_pid.pid


# This setting is used to set the maximum amount of time a process is allowed to complete its task
#     before it gets killed and recycled for memory / management purposes.
# harakiri = 30






